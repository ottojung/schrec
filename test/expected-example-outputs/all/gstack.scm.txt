Original:
(let ((const (null cons
                   car
                   cdr
                   set
                   push
                   pop
                   if
                   null?
                   eq?
                   and
                   do
                   stack))
      (do (start))
      (start (begin null (pop r) (push x) loop))
      (x ((1 2 3 4 5 6)))
      (loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (begin
                  (push r)
                  (push int)
                  car
                  cons
                  (pop r)
                  (push int)
                  cdr
                  loop))))
      (stack (bot)))
  (((eval (g const
             ((do (command) (rest))
              (command (and null rest) command)
              (stack (ss) (() ss))))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and cons rest) command)
              (stack (s1 s2 ss) ((s1 ys) ss))
              (s1 s1 s1)
              (s2 (ys) s2)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and car rest) command)
              (stack (s1 ss) (x ss))
              (s1 (x xs) s1)
              (x x x)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and cdr rest) command)
              (stack (s1 ss) ((xs) ss))
              (s1 (x xs) s1)
              (x x x)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and set rest) command)
              (stack (s1 s2 ss) (s1 ss))
              (s1 (xs) (ys))
              (s2 (ys) s2)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and push-expr rest) command)
              (push-expr (push v) push-expr)
              (v (x) v)
              (stack (ss) (x ss))
              (x x x)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and pop-expr rest) command)
              (pop-expr (pop v) pop-expr)
              (v (cs) (s1))
              (stack (s1 ss) (ss))
              (s1 s1 s1)))
          body)
    (eval (g const
             ((do (command) (then))
              (command (if null? then else) command)
              (stack (s1 ss) (ss))
              (then then then)
              (else else else)
              (s1 s1 s1)))
          (eval (g const
                   ((do (command) (else))
                    (command (if null? then else) command)
                    (stack (s1 ss) (ss))
                    (s1 (x xs) s1)
                    (then then then)
                    (else else else)
                    (x x x)))
                body))
    (eval (g const
             ((do (command) (else))
              (command (if eq? then else) command)
              (stack (s1 s2 ss) (ss))
              (then then then)
              (else else else)
              (s1 s1 s1)
              (s2 s2 s2)))
          (eval (g const
                   ((do (command) (then))
                    (command (if eq? then else) command)
                    (stack (s1 s1 ss) (ss))
                    (s1 s1 s1)
                    (then then then)
                    (else else else)))
                body))
    (eval (g (and begin)
             ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
              (x1 x1 x1)
              (x2 x2 x2)
              (x3 x3 x3)))
          start)
    (eva1 (g (and begin) ((g (begin x1 x2) (and x1 x2))))
          start))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (begin
                  (push r)
                  (push int)
                  car
                  cons
                  (pop r)
                  (push int)
                  cdr
                  loop)))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (begin null (pop r) (push ((1 2 3 4 5 6))) loop))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (begin
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (begin null (pop r) (push ((1 2 3 4 5 6))) loop))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (begin
                  (push r)
                  (push int)
                  car
                  cons
                  (pop r)
                  (push int)
                  cdr
                  loop)))))
  (and null
       (and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (begin
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(let ((do ((begin (pop r) (push ((1 2 3 4 5 6))) loop)))
      (loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (begin
                  (push r)
                  (push int)
                  car
                  cons
                  (pop r)
                  (push int)
                  cdr
                  loop))))
      (stack (() bot)))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin) ((g (begin x1 x2) (and x1 x2))))
--------
(let ((loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (begin
                          (push r)
                          (push int)
                          car
                          cons
                          (pop r)
                          (push int)
                          cdr
                          loop))))))
  (begin null (pop r) (push ((1 2 3 4 5 6))) loop))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (begin
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))))
  (begin null (pop r) (push ((1 2 3 4 5 6))) loop))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (begin
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (begin
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))))
  (begin null (pop r) (push ((1 2 3 4 5 6))) loop))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (and (push int)
                          (begin car cons (pop r) (push int) cdr loop)))))))
  (begin null (pop r) (push ((1 2 3 4 5 6))) loop))


Step:
(g (and begin) ((g (begin x1 x2) (and x1 x2))))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (begin
                  (push r)
                  (push int)
                  car
                  cons
                  (pop r)
                  (push int)
                  cdr
                  loop)))))
  (and null
       (and (pop r) (and (push ((1 2 3 4 5 6))) loop))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (begin
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))


Step:
(let ((do ((and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))
      (loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (begin
                  (push r)
                  (push int)
                  car
                  cons
                  (pop r)
                  (push int)
                  cdr
                  loop))))
      (stack (() bot)))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin) ((g (begin x1 x2) (and x1 x2))))
--------
(let ((loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (begin
                          (push r)
                          (push int)
                          car
                          cons
                          (pop r)
                          (push int)
                          cdr
                          loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (begin
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(let ((do ((begin (pop r) (push ((1 2 3 4 5 6))) loop)))
      (loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop)))))
      (stack (() bot)))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (begin
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (begin
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (and (push int)
                          (begin car cons (pop r) (push int) cdr loop)))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(let ((do ((begin (pop r) (push ((1 2 3 4 5 6))) loop)))
      (loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (begin
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop)))))
      (stack (() bot)))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (begin
                  (push r)
                  (push int)
                  car
                  cons
                  (pop r)
                  (push int)
                  cdr
                  loop)))))
  (and null
       (and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (begin
              (pop int)
              (push int)
              (if null?
                (return r)
                (and (push r)
                     (begin
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (begin
                          (push r)
                          (push int)
                          car
                          cons
                          (pop r)
                          (push int)
                          cdr
                          loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (and (push r)
                             (begin
                               (push int)
                               car
                               cons
                               (pop r)
                               (push int)
                               cdr
                               loop)))))))
  (begin null (pop r) (push ((1 2 3 4 5 6))) loop))


Step:
(g (and begin) ((g (begin x1 x2) (and x1 x2))))
--------
(let ((loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (begin
                          (push r)
                          (push int)
                          car
                          cons
                          (pop r)
                          (push int)
                          cdr
                          loop))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop))))))
  (and null
       (and (pop r) (begin (push ((1 2 3 4 5 6))) loop))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (begin
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))))
  (and null
       (begin (pop r) (push ((1 2 3 4 5 6))) loop)))


Step:
(let ((do ((begin (pop r) (push ((1 2 3 4 5 6))) loop)))
      (loop (and (pop int)
                 (begin
                   (push int)
                   (if null?
                     (return r)
                     (begin
                       (push r)
                       (push int)
                       car
                       cons
                       (pop r)
                       (push int)
                       cdr
                       loop)))))
      (stack (() bot)))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin) ((g (begin x1 x2) (and x1 x2))))
--------
(let ((loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (and (push r)
                             (begin
                               (push int)
                               car
                               cons
                               (pop r)
