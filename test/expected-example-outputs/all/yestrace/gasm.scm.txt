Original:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (body (do start))
      (start (begin
               (new e1)
               (new e2)
               (new e3)
               (new e4)
               (new e5)
               (new e6)
               (set! e1 (cons var1 var2))
               (set! e2 (append var1 var2))
               (set! e3 (head e1))
               (set! e4 (head e2))
               (set! e5 (car e1))
               (set! e6 (car e4))
               (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  (eva1 (g const ((g (begin x1 x2) (and x1 x2))))
        body))


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do start))
      (start (and (new e1)
                  (begin
                    (new e2)
                    (new e3)
                    (new e4)
                    (new e5)
                    (new e6)
                    (set! e1 (cons var1 var2))
                    (set! e2 (append var1 var2))
                    (set! e3 (head e1))
                    (set! e4 (head e2))
                    (set! e5 (car e1))
                    (set! e6 (car e4))
                    (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do start))
      (start (and (new e1)
                  (and (new e2)
                       (begin
                         (new e3)
                         (new e4)
                         (new e5)
                         (new e6)
                         (set! e1 (cons var1 var2))
                         (set! e2 (append var1 var2))
                         (set! e3 (head e1))
                         (set! e4 (head e2))
                         (set! e5 (car e1))
                         (set! e6 (car e4))
                         (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e2)
                 (new e3)
                 (new e4)
                 (new e5)
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do start))
      (start (and (new e1)
                  (and (new e2)
                       (and (new e3)
                            (begin
                              (new e4)
                              (new e5)
                              (new e6)
                              (set! e1 (cons var1 var2))
                              (set! e2 (append var1 var2))
                              (set! e3 (head e1))
                              (set! e4 (head e2))
                              (set! e5 (car e1))
                              (set! e6 (car e4))
                              (ret (vars var1 var2)
                                   (es e1 e2 e3 e4 e5 e6)))))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (and
                 (new e2)
                 (begin
                   (new e3)
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e2)
                 (begin
                   (new e3)
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do start))
      (start (and (new e1)
                  (and (new e2)
                       (and (new e3)
                            (and (new e4)
                                 (begin
                                   (new e5)
                                   (new e6)
                                   (set! e1 (cons var1 var2))
                                   (set! e2 (append var1 var2))
                                   (set! e3 (head e1))
                                   (set! e4 (head e2))
                                   (set! e5 (car e1))
                                   (set! e6 (car e4))
                                   (ret (vars var1 var2)
                                        (es e1 e2 e3 e4 e5 e6))))))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (begin
                        (new e4)
                        (new e5)
                        (new e6)
                        (set! e1 (cons var1 var2))
                        (set! e2 (append var1 var2))
                        (set! e3 (head e1))
                        (set! e4 (head e2))
                        (set! e5 (car e1))
                        (set! e6 (car e4))
                        (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (begin
                        (new e4)
                        (new e5)
                        (new e6)
                        (set! e1 (cons var1 var2))
                        (set! e2 (append var1 var2))
                        (set! e3 (head e1))
                        (set! e4 (head e2))
                        (set! e5 (car e1))
                        (set! e6 (car e4))
                        (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e3)
                 (new e4)
                 (new e5)
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (begin
                        (new e4)
                        (new e5)
                        (new e6)
                        (set! e1 (cons var1 var2))
                        (set! e2 (append var1 var2))
                        (set! e3 (head e1))
                        (set! e4 (head e2))
                        (set! e5 (car e1))
                        (set! e6 (car e4))
                        (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e3)
                 (new e4)
                 (new e5)
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do start))
      (start (and (new e1)
                  (and (new e2)
                       (and (new e3)
                            (and (new e4)
                                 (and (new e5)
                                      (begin
                                        (new e6)
                                        (set! e1 (cons var1 var2))
                                        (set! e2 (append var1 var2))
                                        (set! e3 (head e1))
                                        (set! e4 (head e2))
                                        (set! e5 (car e1))
                                        (set! e6 (car e4))
                                        (ret (vars var1 var2)
                                             (es e1 e2 e3 e4 e5 e6)))))))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (and (new e4)
                           (begin
                             (new e5)
                             (new e6)
                             (set! e1 (cons var1 var2))
                             (set! e2 (append var1 var2))
                             (set! e3 (head e1))
                             (set! e4 (head e2))
                             (set! e5 (car e1))
                             (set! e6 (car e4))
                             (ret (vars var1 var2)
                                  (es e1 e2 e3 e4 e5 e6))))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (and (new e4)
                           (begin
                             (new e5)
                             (new e6)
                             (set! e1 (cons var1 var2))
                             (set! e2 (append var1 var2))
                             (set! e3 (head e1))
                             (set! e4 (head e2))
                             (set! e5 (car e1))
                             (set! e6 (car e4))
                             (ret (vars var1 var2)
                                  (es e1 e2 e3 e4 e5 e6))))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (and
                 (new e3)
                 (begin
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (and (new e4)
                           (begin
                             (new e5)
                             (new e6)
                             (set! e1 (cons var1 var2))
                             (set! e2 (append var1 var2))
                             (set! e3 (head e1))
                             (set! e4 (head e2))
                             (set! e5 (car e1))
                             (set! e6 (car e4))
                             (ret (vars var1 var2)
                                  (es e1 e2 e3 e4 e5 e6))))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (and
                 (new e3)
                 (begin
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e3)
                 (begin
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (and (new e4)
                           (begin
                             (new e5)
                             (new e6)
                             (set! e1 (cons var1 var2))
                             (set! e2 (append var1 var2))
                             (set! e3 (head e1))
                             (set! e4 (head e2))
                             (set! e5 (car e1))
                             (set! e6 (car e4))
                             (ret (vars var1 var2)
                                  (es e1 e2 e3 e4 e5 e6))))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (and
                 (new e3)
                 (begin
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e3)
                 (begin
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do start))
      (start (and (new e1)
                  (and (new e2)
                       (and (new e3)
                            (and (new e4)
                                 (and (new e5)
                                      (and (new e6)
                                           (begin
                                             (set! e1 (cons var1 var2))
                                             (set! e2 (append var1 var2))
                                             (set! e3 (head e1))
                                             (set! e4 (head e2))
                                             (set! e5 (car e1))
                                             (set! e6 (car e4))
                                             (ret (vars var1 var2)
                                                  (es e1
                                                      e2
                                                      e3
                                                      e4
                                                      e5
                                                      e6))))))))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (and
                 (new e2)
                 (and (new e3)
                      (and (new e4)
                           (and (new e5)
