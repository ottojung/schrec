Original:
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (progn (push r)
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))
  (eva1 (g (and progn) ((g (progn x1 x2) (and x1 x2))))
        start))


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (progn (push r)
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (progn (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (progn (push r)
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (progn (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(let ((const (null cons
                   car
                   cdr
                   set
                   push
                   pop
                   if
                   null?
                   eq?
                   and
                   do
                   stack))
      (do ((progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (progn (push r)
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop))))
      (stack (())))
  (g const
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and progn) ((g (progn x1 x2) (and x1 x2))))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (progn (push r)
                               (push int)
                               car
                               cons
                               (pop r)
                               (push int)
                               cdr
                               loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (and (push r)
                               (progn (push int)
                                      car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (progn (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (and (push r)
                               (progn (push int)
                                      car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (and (push int)
                               (progn car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(g (and progn) ((g (progn x1 x2) (and x1 x2))))
--------
(let ((start (and null (and (pop r) (and (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (progn (push r)
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (progn (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(let ((const (null cons
                   car
                   cdr
                   set
                   push
                   pop
                   if
                   null?
                   eq?
                   and
                   do
                   stack))
      (do ((and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (progn (push r)
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop))))
      (stack (())))
  (g const
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and progn) ((g (progn x1 x2) (and x1 x2))))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (progn (push r)
                               (push int)
                               car
                               cons
                               (pop r)
                               (push int)
                               cdr
                               loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (and (push r)
                               (progn (push int)
                                      car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(let ((const (null cons
                   car
                   cdr
                   set
                   push
                   pop
                   if
                   null?
                   eq?
                   and
                   do
                   stack))
      (do ((progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop)))))
      (stack (())))
  (g const
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (progn (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (and (push r)
                               (progn (push int)
                                      car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (and (push int)
                               (progn car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(let ((const (null cons
                   car
                   cdr
                   set
                   push
                   pop
                   if
                   null?
                   eq?
                   and
                   do
                   stack))
      (do ((progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (progn (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop)))))
      (stack (())))
  (g const
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (progn (push r)
                            (push int)
                            car
                            cons
                            (pop r)
                            (push int)
                            cdr
                            loop)))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
                          (progn (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (progn (push r)
                               (push int)
                               car
                               cons
                               (pop r)
                               (push int)
                               cdr
                               loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (and (push r)
                             (progn (push int)
                                    car
                                    cons
                                    (pop r)
                                    (push int)
                                    cdr
                                    loop)))))))
  start)


Step:
(g (and progn) ((g (progn x1 x2) (and x1 x2))))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (progn (push r)
                               (push int)
                               car
                               cons
                               (pop r)
                               (push int)
                               cdr
                               loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (and (push r)
                               (progn (push int)
                                      car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(let ((const (null cons
                   car
                   cdr
                   set
                   push
                   pop
                   if
                   null?
                   eq?
                   and
                   do
                   stack))
      (do ((progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (progn (push r)
                                 (push int)
                                 car
                                 cons
                                 (pop r)
                                 (push int)
                                 cdr
                                 loop)))))
      (stack (())))
  (g const
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and progn) ((g (progn x1 x2) (and x1 x2))))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (and (push int)
                      (if null?
                        (return r)
                        (and (push r)
                             (progn (push int)
                                    car
                                    cons
                                    (pop r)
                                    (push int)
                                    cdr
                                    loop)))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (progn (pop r) (push x) loop)))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (and (push r)
                               (progn (push int)
                                      car
                                      cons
                                      (pop r)
                                      (push int)
                                      cdr
                                      loop)))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (progn null (pop r) (push x) loop))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (and (pop int)
                 (progn (push int)
                        (if null?
                          (return r)
                          (and (push r)
                               (and (push int)
                                    (progn car
                                           cons
                                           (pop r)
                                           (push int)
                                           cdr
                                           loop))))))))
  start)


Step:
(g (and progn)
   ((g (progn x1 x2 x3 xs) (and x1 (progn x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null (and (pop r) (progn (push x) loop))))
      (r ())
      (x ((1 2 3 4 5 6)))
      (loop (progn (pop int)
                   (push int)
                   (if null?
                     (return r)
                     (and (push r)
