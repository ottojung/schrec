Original:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (body (do start))
      (start (begin
               (new e1)
               (new e2)
               (new e3)
               (new e4)
               (new e5)
               (new e6)
               (set! e1 (cons var1 var2))
               (set! e2 (append var1 var2))
               (set! e3 (head e1))
               (set! e4 (head e2))
               (set! e5 (car e1))
               (set! e6 (car e4))
               (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  (eva1 (g const ((g (begin x1 x2) (and x1 x2))))
        body))


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do start))
      (start (and (new e1)
                  (begin
                    (new e2)
                    (new e3)
                    (new e4)
                    (new e5)
                    (new e6)
                    (set! e1 (cons var1 var2))
                    (set! e2 (append var1 var2))
                    (set! e3 (head e1))
                    (set! e4 (head e2))
                    (set! e5 (car e1))
                    (set! e6 (car e4))
                    (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e2)
                 (new e3)
                 (new e4)
                 (new e5)
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e2)
                 (begin
                   (new e3)
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e3)
                 (new e4)
                 (new e5)
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e3)
                 (begin
                   (new e4)
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e4)
                 (new e5)
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e4)
                 (begin
                   (new e5)
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e5)
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ()))
      (e4 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e5)
                 (begin
                   (new e6)
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ()))
      (e4 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (new e6)
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ()))
      (e4 (qq ()))
      (e5 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (new e6)
                 (begin
                   (set! e1 (cons var1 var2))
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ()))
      (e4 (qq ()))
      (e5 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (new v)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v v (qq ()))
      (i i i))))
--------
(let ((body (do (begin
                 (set! e1 (cons var1 var2))
                 (set! e2 (append var1 var2))
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ()))
      (e4 (qq ()))
      (e5 (qq ()))
      (e6 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (set! e1 (cons var1 var2))
                 (begin
                   (set! e2 (append var1 var2))
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ()))
      (e4 (qq ()))
      (e5 (qq ()))
      (e6 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (set! e1 (cons var1 var2))
                 (and (set! e2 (append var1 var2))
                      (begin
                        (set! e3 (head e1))
                        (set! e4 (head e2))
                        (set! e5 (car e1))
                        (set! e6 (car e4))
                        (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))))
      (e1 (qq ()))
      (var1 (qq (2)))
      (var2 (qq (5 6)))
      (e2 (qq ()))
      (e3 (qq ()))
      (e4 (qq ()))
      (e5 (qq ()))
      (e6 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (set! v e))
      (e (cons a b))
      (a (qq al))
      (b (qq bl))
      (bl (bs)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v (qq qv) v)
      (qv qv (al bs))
      (al al al)
      (bl bl bl)
      (a a a)
      (b b b)
      (e e e)
      (i i i)
      (x x x))))
--------
(let ((body (do (and
                 (set! e2 (append var1 var2))
                 (begin
                   (set! e3 (head e1))
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e2 (qq ()))
      (var1 (qq $1))
      ($1 (2))
      (var2 (qq (5 6)))
      (e3 (qq ()))
      (e1 (qq ($1 5 6)))
      (e4 (qq ()))
      (e5 (qq ()))
      (e6 (qq ())))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (i (set! v e))
      (e (append a b))
      (a (qq al))
      (al (al1))
      (b (qq bl))
      (bl (bs)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (v (qq qv) v)
      (qv qv (al1 bs))
      (al1 al1 al1)
      (al al al)
      (bl bl bl)
      (a a a)
      (b b b)
      (e e e)
      (i i i)
      (x x x))))
--------
(let ((body (do (begin
                 (set! e3 (head e1))
                 (set! e4 (head e2))
                 (set! e5 (car e1))
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e3 (qq ()))
      (e1 (qq ($1 5 6)))
      ($1 (2))
      (e4 (qq ()))
      (e2 (qq (2 5 6)))
      (e5 (qq ()))
      (e6 (qq ()))
      (var1 (qq $1))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (set! e3 (head e1))
                 (begin
                   (set! e4 (head e2))
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e3 (qq ()))
      (e1 (qq ($1 5 6)))
      ($1 (2))
      (e4 (qq ()))
      (e2 (qq (2 5 6)))
      (e5 (qq ()))
      (e6 (qq ()))
      (var1 (qq $1))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (set! e3 (head e1))
                 (and (set! e4 (head e2))
                      (begin
                        (set! e5 (car e1))
                        (set! e6 (car e4))
                        (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))))
      (e3 (qq ()))
      (e1 (qq ($1 5 6)))
      ($1 (2))
      (e4 (qq ()))
      (e2 (qq (2 5 6)))
      (e5 (qq ()))
      (e6 (qq ()))
      (var1 (qq $1))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (in (set! v e))
      (e (head q))
      (q (qq l))
      (l (x xs)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (i in i)
      (v (qq qv) v)
      (qv qv (x))
      (second second second)
      (l l l)
      (q q q)
      (e e e)
      (x x x))))
--------
(let ((body (do (and
                 (set! e4 (head e2))
                 (begin
                   (set! e5 (car e1))
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e4 (qq ()))
      (e2 (qq (2 5 6)))
      (e5 (qq ()))
      (e1 (qq ($1 5 6)))
      ($1 (2))
      (e6 (qq ()))
      (var1 (qq $1))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const
     ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
      (x1 x1 x1)
      (x2 x2 x2)
      (x3 x3 x3))))
--------
(let ((body (do (and
                 (set! e4 (head e2))
                 (and (set! e5 (car e1))
                      (begin
                        (set! e6 (car e4))
                        (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))))
      (e4 (qq ()))
      (e2 (qq (2 5 6)))
      (e5 (qq ()))
      (e1 (qq ($1 5 6)))
      ($1 (2))
      (e6 (qq ()))
      (var1 (qq $1))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (in (set! v e))
      (e (head q))
      (q (qq l))
      (l (x xs)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (i in i)
      (v (qq qv) v)
      (qv qv (x))
      (second second second)
      (l l l)
      (q q q)
      (e e e)
      (x x x))))
--------
(let ((body (do (and
                 (set! e5 (car e1))
                 (begin
                   (set! e6 (car e4))
                   (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6))))))
      (e5 (qq ()))
      (e1 (qq ($1 5 6)))
      ($1 (2))
      (e6 (qq ()))
      (e4 (qq (2)))
      (var1 (qq $1))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (in (set! v e))
      (e (car q))
      (q (qq l))
      (l (x xs)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (i in i)
      (v (qq qv) (qq x))
      (second second second)
      (l l l)
      (q q q)
      (e e e)
      (x x x))))
--------
(let ((body (do (begin
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e6 (qq ()))
      (e4 (qq (2)))
      (var1 (qq $1))
      ($1 (2))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin)))
  (g const ((g (begin x1 x2) (and x1 x2)))))
--------
(let ((body (do (and
                 (set! e6 (car e4))
                 (ret (vars var1 var2) (es e1 e2 e3 e4 e5 e6)))))
      (e6 (qq ()))
      (e4 (qq (2)))
      (var1 (qq $1))
      ($1 (2))
      (var2 (qq (5 6))))
  body)


Step:
(let ((const (head tail
                   null?
                   cons
                   car
                   eq?
                   if
                   append
                   set!
                   and
                   qq
                   new
                   do
                   begin))
      (in (set! v e))
      (e (car q))
      (q (qq l))
      (l (x xs)))
  (g const
     ((g (do pair) (do second))
      (pair (and i second) pair)
      (i in i)
      (v (qq qv) (qq x))
      (second second second)
      (l l l)
      (q q q)
      (e e e)
