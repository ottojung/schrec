Original:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (body (results
              (program (add (num (i i i i)) (num (i i i))))))
      (add (rec (pi 0) (comp succ (pi 1))))
      (0 (num (i)))
      (1 (num (i i))))
  (eval (o const
           ((o (rr args sm)
               (g (num (x2 xs)) (rr args (num (x2 xs))) args))
            (rr (rec f g) rr)
            (sm (num nl) sm)
            (nl (x1 x2 xs) nl)
            (x1 x1 x1)
            (x2 x2 x2)
            (f f f)
            (g g g)))
        body))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args sm)
         (g (num (x2 xs)) (rr args (num (x2 xs))) args))
      (rr (rec f g) rr)
      (sm (num nl) sm)
      (nl (x1 x2 xs) nl)
      (x1 x1 x1)
      (x2 x2 x2)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ($1 (num (i i)) (add $2 (num (i i))) $2))))
      ($1 (comp succ (pi 1)))
      (1 (num (i i)))
      (add (rec (pi 0) $1))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args sm)
         (g (num (x2 xs)) (rr args (num (x2 xs))) args))
      (rr (rec f g) rr)
      (sm (num nl) sm)
      (nl (x1 x2 xs) nl)
      (x1 x1 x1)
      (x2 x2 x2)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ($1 (num (i i))
                    ($1 (num (i)) (add $2 (num (i))) $2)
                    $2))))
      ($1 (comp succ (pi 1)))
      (1 (num (i i)))
      (add (rec (pi 0) $1))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args n0) (f args))
      (rr (rec f g) rr)
      (n0 (num numz) n0)
      (numz (nums) numz)
      (nums nums nums)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ($1 (num (i i)) ($1 (num (i)) ((pi 0) $2) $2) $2))))
      ($1 (comp succ (pi 1)))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  ((comp succ $1) (num (i)) ((pi 0) $2) $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  (comp-map
                    succ
                    (())
                    (() $1)
                    (num (i))
                    ((pi 0) $2)
                    $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (comp-map f acc gf xs) (f args (g xs)))
      (gf (bl1 g) gf)
      (acc (bl2 args) acc)
      (bl1 bl1 bl1)
      (bl2 bl2 bl2)
      (f f f)
      (g g g)
      (x1 x1 x1))))
--------
(let ((body (results
              (program
                (succ ($1 (num (i i))
                          (comp-map
                            succ
                            (())
                            (() $1)
                            (num (i))
                            ((pi 0) $2)
                            $2)
                          $2)))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (comp-map f acc gf xs) (f args (g xs)))
      (gf (bl1 g) gf)
      (acc (bl2 args) acc)
      (bl1 bl1 bl1)
      (bl2 bl2 bl2)
      (f f f)
      (g g g)
      (x1 x1 x1))))
--------
(let ((body (results
              (program
                (succ ($1 (num (i i))
                          (succ ($1 (num (i)) ((pi 0) $2) $2))
                          $2)))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (g const
     ((g (pin x xs) ((pi (num (n1 ns))) xs))
      (pin (pi sn) pin)
      (sn (num (n0 n1 ns)) sn)
      (x x x)
      (n0 n0 n0)
      (n1 n1 n1)
      (f f f)
      (n n n))))
--------
(let ((body (results
              (program
                (succ ((pi (num (i)))
                       (succ ((pi 1) (num (i)) ((pi 0) $1) $1))
                       $1)))))
      (1 (num (i i)))
      (0 (num (i)))
      ($1 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (g const
     ((g (pin x xs) ((pi (num (n1 ns))) xs))
      (pin (pi sn) pin)
      (sn (num (n0 n1 ns)) sn)
      (x x x)
      (n0 n0 n0)
      (n1 n1 n1)
      (f f f)
      (n n n))))
--------
(let ((body (results
              (program
                (succ ((pi (num (i)))
                       (succ ((pi (num (i))) ((pi 0) $1) $1))
                       $1)))))
      (0 (num (i)))
      ($1 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g const
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(let ((body (results
              (program
                (succ (succ ((pi (num (i))) ((pi 0) $1) $1))))))
      (0 (num (i)))
      ($1 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g const
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(let ((body (results
              (program (succ (succ ((pi 0) (num (i i i i))))))))
      (0 (num (i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g const
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(let ((body (results (program (succ (succ (num (i i i i))))))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (succ n) (num (i ys)))
      (n (num y) n)
      (y (ys) y))))
--------
(let ((body (results (program (succ (num (i i i i i)))))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (succ n) (num (i ys)))
      (n (num y) n)
      (y (ys) y))))
--------
(let ((body (results (program (num (i i i i i i))))))
  body)
