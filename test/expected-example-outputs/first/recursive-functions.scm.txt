Original:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums))
      (body (results
              (program
                ((rec (pi (num (i))) (comp succ (pi (num (i i)))))
                 (num (i i i i))
                 (num (i i i))))))
      (result (num not0))
      (result.4 (num n.4))
      (n.4 (i))
      (main (μ f)))
  (((eval (g const
             ((g (xs pa ys) (xs a ys))
              (pa pa pa)
              (p0 p0 p0)
              (z z z)
              (a a a)
              (numz numz numz)
              (nums nums nums)
              (y y y)))
          body)
    (eval (g const
             ((g (pin x xs) ((pi (num (n1 ns))) xs))
              (pin (pi sn) pin)
              (sn (num (n0 n1 ns)) sn)
              (x x x)
              (n0 n0 n0)
              (n1 n1 n1)
              (f f f)
              (n n n)))
          body)
    (eval (g const ((g (zero xs) (num (i))))) body)
    (eval (o const
             ((o (succ n) (num (i ys)))
              (n (num y) n)
              (y (ys) y)))
          body)
    (eval (o const
             ((o (comp-map f acc gf xs) (f args (g xs)))
              (gf (bl1 g) gf)
              (acc (bl2 args) acc)
              (bl1 bl1 bl1)
              (bl2 bl2 bl2)
              (f f f)
              (g g g)
              (x1 x1 x1)))
          body)
    (eval (o const
             ((o (comp-map f acc gf xs)
                 (comp-map f (args (g1 xs)) gf xs))
              (gf (bl2 g1 g2 gs) (bl2 g2 gs))
              (acc (args) acc)
              (bl2 bl2 bl2)
              (f f f)
              (g1 g1 g1)
              (g2 g2 g2)))
          body)
    (eval (o const
             ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
              (c (comp f g gs) c)
              (f f f)
              (g g g)))
          body)
    (eval (o const
             ((o (search-μ f result x args)
                 (search-μ f (f (succ x) args) (succ x) args))
              (f f f)
              (x x x)
              (not0 not0 not0)
              (result result result)))
          (eval (o const
                   ((o (search-μ-keyword f result.4 x args)
                       ((pi (num (i))) x))
                    (search-μ-keyword search-μ search-μ-keyword)
                    (n.4 n.4 n.4)
                    (f f f)
                    (x x x)
                    (result.4 result.4 result.4)))
                body))
    (eval (o const
             ((o (main args)
                 (search-μ f (f (num (i))) (num (i)) args))
              (f f f)
              (main main main)))
          body)
    (eval (o const
             ((o (rr args n0) (f args))
              (rr (rec f g) rr)
              (n0 (num numz.0) n0)
              (numz.0 (nums) numz.0)
              (nums nums nums)
              (f f f)
              (g g g)))
          body)
    (eval (o const
             ((o (rr args sm)
                 (g (num (x2 xs)) (rr args (num (x2 xs))) args))
              (rr (rec f g) rr)
              (sm (num nl) sm)
              (nl (x1 x2 xs) nl)
              (x1 x1 x1)
              (x2 x2 x2)
              (f f f)
              (g g g)))
          body))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (rr args sm)
       (g (num (x2 xs)) (rr args (num (x2 xs))) args))
    (rr (rec f g) rr)
    (sm (num nl) sm)
    (nl (x1 x2 xs) nl)
    (x1 x1 x1)
    (x2 x2 x2)
    (f f f)
    (g g g)))
--------
(let (($1 (comp succ (pi (num (i i)))))
      ($2 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          ((rec (pi (num (i))) $1) $2 (num (i i)))
          $2))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (rr args sm)
       (g (num (x2 xs)) (rr args (num (x2 xs))) args))
    (rr (rec f g) rr)
    (sm (num nl) sm)
    (nl (x1 x2 xs) nl)
    (x1 x1 x1)
    (x2 x2 x2)
    (f f f)
    (g g g)))
--------
(let (($1 (comp succ (pi (num (i i)))))
      ($2 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          ($1 (num (i))
              ((rec (pi (num (i))) $1) $2 (num (i)))
              $2)
          $2))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (rr args n0) (f args))
    (rr (rec f g) rr)
    (n0 (num numz) n0)
    (numz (nums) numz)
    (nums nums nums)
    (f f f)
    (g g g)))
--------
(let (($1 (comp succ (pi (num (i i)))))
      ($2 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          ($1 (num (i)) ((pi (num (i))) $2) $2)
          $2))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
    (c (comp f g gs) c)
    (f f f)
    (g g g)))
--------
(let (($1 (pi (num (i i)))) ($2 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $1)
        (num (i i))
        ((comp succ $1) (num (i)) ((pi (num (i))) $2) $2)
        $2))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
    (c (comp f g gs) c)
    (f f f)
    (g g g)))
--------
(let (($1 (pi (num (i i)))) ($2 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $1)
        (num (i i))
        (comp-map
          succ
          (())
          (() $1)
          (num (i))
          ((pi (num (i))) $2)
          $2)
        $2))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (comp-map f acc gf xs) (f args (g xs)))
    (gf (bl1 g) gf)
    (acc (bl2 args) acc)
    (bl1 bl1 bl1)
    (bl2 bl2 bl2)
    (f f f)
    (g g g)
    (x1 x1 x1)))
--------
(let (($1 (pi (num (i i)))) ($2 (num (i i i i))))
  (results
    (program
      (succ ($1 (num (i i))
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i))
                  ((pi (num (i))) $2)
                  $2)
                $2)))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (comp-map f acc gf xs) (f args (g xs)))
    (gf (bl1 g) gf)
    (acc (bl2 args) acc)
    (bl1 bl1 bl1)
    (bl2 bl2 bl2)
    (f f f)
    (g g g)
    (x1 x1 x1)))
--------
(let (($1 (pi (num (i i)))) ($2 (num (i i i i))))
  (results
    (program
      (succ ($1 (num (i i))
                (succ ($1 (num (i)) ((pi (num (i))) $2) $2))
                $2)))))


Step:
(g (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((g (pin x xs) ((pi (num (n1 ns))) xs))
    (pin (pi sn) pin)
    (sn (num (n0 n1 ns)) sn)
    (x x x)
    (n0 n0 n0)
    (n1 n1 n1)
    (f f f)
    (n n n)))
--------
(let (($1 (num (i i i i))))
  (results
    (program
      (succ ((pi (num (i)))
             (succ ((pi (num (i i)))
                    (num (i))
                    ((pi (num (i))) $1)
                    $1))
             $1)))))


Step:
(g (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((g (pin x xs) ((pi (num (n1 ns))) xs))
    (pin (pi sn) pin)
    (sn (num (n0 n1 ns)) sn)
    (x x x)
    (n0 n0 n0)
    (n1 n1 n1)
    (f f f)
    (n n n)))
--------
(let (($1 (num (i i i i))))
  (results
    (program
      (succ ((pi (num (i)))
             (succ ((pi (num (i))) ((pi (num (i))) $1) $1))
             $1)))))


Step:
(let ((pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g (zero succ
           pi
           comp
           comp-map
           rec
           μ
           search-μ
           num
           i
           hello)
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(let (($1 (num (i i i i))))
  (results
    (program
      (succ (succ ((pi (num (i))) ((pi (num (i))) $1) $1))))))


Step:
(let ((pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g (zero succ
           pi
           comp
           comp-map
           rec
           μ
           search-μ
           num
           i
           hello)
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(results
  (program
    (succ (succ ((pi (num (i))) (num (i i i i)))))))


Step:
(let ((pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g (zero succ
           pi
           comp
           comp-map
           rec
           μ
           search-μ
           num
           i
           hello)
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(results (program (succ (succ (num (i i i i))))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (succ n) (num (i ys)))
    (n (num y) n)
    (y (ys) y)))
--------
(results (program (succ (num (i i i i i)))))


Step:
(o (zero succ
         pi
         comp
         comp-map
         rec
         μ
         search-μ
         num
         i
         hello)
   ((o (succ n) (num (i ys)))
    (n (num y) n)
    (y (ys) y)))
--------
(results (program (num (i i i i i i))))
