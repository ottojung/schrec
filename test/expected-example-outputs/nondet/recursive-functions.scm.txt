Original:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums))
      (body (results
              (program
                ((rec (pi (num (i))) (comp succ (pi (num (i i)))))
                 (num (i i i i))
                 (num (i i i)))))))
  (((eval g
          ((const g (xs pa ys) (xs a ys))
           (() pa pa pa)
           (() p0 p0 p0)
           (() z z z)
           (() a a a)
           (() numz numz numz)
           (() nums nums nums)
           (() y y y))
          body)
    (eval g
          ((const g (pin x xs) ((pi (num (n1 ns))) xs))
           (const pin (pi sn) pin)
           (const sn (num (n0 n1 ns)) sn)
           (const x x x)
           (() n0 n0 n0)
           (() n1 n1 n1)
           (() f f f)
           (() n n n))
          body)
    (eval g ((const g (zero xs) (num (i)))) body)
    (eval o
          ((const o (succ n) (num (i ys)))
           (const n (num y) n)
           (() y (ys) y))
          body)
    (eval o
          ((const o (comp-map f acc gf xs) (f args (g xs)))
           (() gf (bl1 g) gf)
           (() acc (bl2 args) acc)
           (() bl1 bl1 bl1)
           (() bl2 bl2 bl2)
           (() f f f)
           (() g g g)
           (() x1 x1 x1))
          body)
    (eval o
          ((const o
                  (comp-map f acc gf xs)
                  (comp-map f (args (g1 xs)) gf xs))
           (() gf (bl2 g1 g2 gs) (bl2 g2 gs))
           (() acc (args) acc)
           (() bl2 bl2 bl2)
           (() f f f)
           (() g1 g1 g1)
           (() g2 g2 g2))
          body)
    (eval o
          ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
           (const c (comp f g gs) c)
           (() f f f)
           (() g g g))
          body)
    (eva1 o
          ((const o
                  (search-μ f (num not0) x)
                  (search-μ f (f (succ x)) (succ x))))
          (eva1 o
                ((const o
                        (search-μ-keyword f (num (i)) x)
                        ((pi (num (i))) x))
                 (const search-μ-keyword
                        search-μ
                        search-μ-keyword))
                body))
    (eva1 o
          ((const o
                  (μ f)
                  (search-μ f (f (num (i))) (num (i)))))
          body)
    (eval o
          ((const o (rr args n0) (f args))
           (const rr (rec f g) rr)
           (const n0 (num numz.0) n0)
           (() numz.0 (nums) numz.0)
           (() nums nums nums)
           (() f f f)
           (() g g g))
          body)
    (eval o
          ((const o
                  (rr args sm)
                  (g (num (x2 xs)) (rr args (num (x2 xs))) args))
           (const rr (rec f g) rr)
           (const sm (num nl) sm)
           (() nl (x1 x2 xs) nl)
           (() x1 x1 x1)
           (() x2 x2 x2)
           (() f f f)
           (() g g g))
          body))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o
          (rr args sm)
          (g (num (x2 xs)) (rr args (num (x2 xs))) args))
   (const rr (rec f g) rr)
   (const sm (num nl) sm)
   (() nl (x1 x2 xs) nl)
   (() x1 x1 x1)
   (() x2 x2 x2)
   (() f f f)
   (() g g g)))
--------
(let (($1 (comp succ (pi (num (i i)))))
      ($2 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          ((rec (pi (num (i))) $1) $2 (num (i i)))
          $2))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o
          (rr args sm)
          (g (num (x2 xs)) (rr args (num (x2 xs))) args))
   (const rr (rec f g) rr)
   (const sm (num nl) sm)
   (() nl (x1 x2 xs) nl)
   (() x1 x1 x1)
   (() x2 x2 x2)
   (() f f f)
   (() g g g)))
--------
(let (($1 (comp succ (pi (num (i i)))))
      ($2 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          ($1 (num (i))
              ((rec (pi (num (i))) $1) $2 (num (i)))
              $2)
          $2))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($4 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        ((rec (pi (num (i))) (comp succ $3))
         $4
         (num (i i)))
        $4))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (rr args n0) (f args))
   (const rr (rec f g) rr)
   (const n0 (num numz) n0)
   (() numz (nums) numz)
   (() nums nums nums)
   (() f f f)
   (() g g g)))
--------
(let (($1 (comp succ (pi (num (i i)))))
      ($2 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          ($1 (num (i)) ((pi (num (i))) $2) $2)
          $2))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i))))
      ($4 (comp succ $3))
      ($5 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        ($4 (num (i))
            ((rec (pi (num (i))) $4) $5 (num (i)))
            $5)
        $5))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($1 (comp succ $2))
      ($2 (pi (num (i i))))
      ($5 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          (comp-map
            succ
            (())
            (() $2)
            (num (i))
            ((rec (pi (num (i))) $1) $5 (num (i)))
            $5)
          $5))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o
          (rr args sm)
          (g (num (x2 xs)) (rr args (num (x2 xs))) args))
   (const rr (rec f g) rr)
   (const sm (num nl) sm)
   (() nl (x1 x2 xs) nl)
   (() x1 x1 x1)
   (() x2 x2 x2)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i))))
      ($4 (comp succ $3))
      ($5 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        ($4 (num (i))
            ((rec (pi (num (i))) $4) $5 (num (i)))
            $5)
        $5))))


Step:
(((zero succ
        pi
        comp
        comp-map
        rec
        μ
        search-μ
        num
        i
        hello)
  o
  (comp-map f acc gf xs)
  (f args (g xs)))
 (() gf (bl1 g) gf)
 (() acc (bl2 args) acc)
 (() bl1 bl1 bl1)
 (() bl2 bl2 bl2)
 (() f f f)
 (() g g g)
 (() x1 x1 x1))
--------
(let (($1 (pi (num (i i)))) ($2 (num (i i i i))))
  (results
    (program
      (succ ($1 (num (i i))
                ((rec (pi (num (i))) (comp succ $1))
                 $2
                 (num (i i)))
                $2)))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($4 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        ((comp succ $3) (num (i)) ((pi (num (i))) $4) $4)
        $4))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($1 (pi (num (i i)))) ($4 (num (i i i i))))
  (results
    (program
      ((comp succ $1)
       (num (i i))
       (comp-map
         succ
         (())
         (() $1)
         (num (i))
         ((pi (num (i))) $4)
         $4)
       $4))))


Step:
(let ((pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (((zero succ
          pi
          comp
          comp-map
          rec
          μ
          search-μ
          num
          i
          hello)
    g
    (xs pa ys)
    (xs a ys))
   (() pa pa pa)
   (() p0 p0 p0)
   (() z z z)
   (() a a a)
   (() numz numz numz)
   (() nums nums nums)
   (() y y y)))
--------
(let (($1 (comp succ (pi (num (i i)))))
      ($2 (num (i i i i))))
  (results
    (program
      ($1 (num (i i)) ($1 (num (i)) $2 $2) $2))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (rr args n0) (f args))
   (const rr (rec f g) rr)
   (const n0 (num numz) n0)
   (() numz (nums) numz)
   (() nums nums nums)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($4 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        ((comp succ $3) (num (i)) ((pi (num (i))) $4) $4)
        $4))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($6 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        (comp-map
          succ
          (())
          (() $3)
          (num (i))
          ((rec (pi (num (i))) (comp succ $3))
           $6
           (num (i)))
          $6)
        $6))))


Step:
(((zero succ
        pi
        comp
        comp-map
        rec
        μ
        search-μ
        num
        i
        hello)
  o
  (comp-map f acc gf xs)
  (f args (g xs)))
 (() gf (bl1 g) gf)
 (() acc (bl2 args) acc)
 (() bl1 bl1 bl1)
 (() bl2 bl2 bl2)
 (() f f f)
 (() g g g)
 (() x1 x1 x1))
--------
(let (($1 (pi (num (i i))))
      ($2 (comp succ $1))
      ($3 (num (i i i i))))
  (results
    (program
      (succ ($1 (num (i i))
                ($2 (num (i))
                    ((rec (pi (num (i))) $2) $3 (num (i)))
                    $3)
                $3)))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (rr args n0) (f args))
   (const rr (rec f g) rr)
   (const n0 (num numz) n0)
   (() numz (nums) numz)
   (() nums nums nums)
   (() f f f)
   (() g g g)))
--------
(let (($1 (pi (num (i i)))) ($4 (num (i i i i))))
  (results
    (program
      ((comp succ $1)
       (num (i i))
       (comp-map
         succ
         (())
         (() $1)
         (num (i))
         ((pi (num (i))) $4)
         $4)
       $4))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($6 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        (comp-map
          succ
          (())
          (() $3)
          (num (i))
          ((rec (pi (num (i))) (comp succ $3))
           $6
           (num (i)))
          $6)
        $6))))


Step:
(((zero succ
        pi
        comp
        comp-map
        rec
        μ
        search-μ
        num
        i
        hello)
  o
  (comp-map f acc gf xs)
  (f args (g xs)))
 (() gf (bl1 g) gf)
 (() acc (bl2 args) acc)
 (() bl1 bl1 bl1)
 (() bl2 bl2 bl2)
 (() f f f)
 (() g g g)
 (() x1 x1 x1))
--------
(let (($1 (comp succ $2))
      ($2 (pi (num (i i))))
      ($3 (num (i i i i))))
  (results
    (program
      ($1 (num (i i))
          (succ ($2 (num (i))
                    ((rec (pi (num (i))) $1) $3 (num (i)))
                    $3))
          $3))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (rr args n0) (f args))
   (const rr (rec f g) rr)
   (const n0 (num numz) n0)
   (() numz (nums) numz)
   (() nums nums nums)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($4 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        ((comp succ $3) (num (i)) ((pi (num (i))) $4) $4)
        $4))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($6 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        (comp-map
          succ
          (())
          (() $3)
          (num (i))
          ((rec (pi (num (i))) (comp succ $3))
           $6
           (num (i)))
          $6)
        $6))))


Step:
(((zero succ
        pi
        comp
        comp-map
        rec
        μ
        search-μ
        num
        i
        hello)
  o
  (comp-map f acc gf xs)
  (f args (g xs)))
 (() gf (bl1 g) gf)
 (() acc (bl2 args) acc)
 (() bl1 bl1 bl1)
 (() bl2 bl2 bl2)
 (() f f f)
 (() g g g)
 (() x1 x1 x1))
--------
(let (($1 (pi (num (i i))))
      ($2 (comp succ $1))
      ($3 (num (i i i i))))
  (results
    (program
      (succ ($1 (num (i i))
                ($2 (num (i))
                    ((rec (pi (num (i))) $2) $3 (num (i)))
                    $3)
                $3)))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o
          (rr args sm)
          (g (num (x2 xs)) (rr args (num (x2 xs))) args))
   (const rr (rec f g) rr)
   (const sm (num nl) sm)
   (() nl (x1 x2 xs) nl)
   (() x1 x1 x1)
   (() x2 x2 x2)
   (() f f f)
   (() g g g)))
--------
(let (($1 (pi (num (i i))))
      ($2 (comp succ $1))
      ($3 (num (i i i i))))
  (results
    (program
      (succ ($1 (num (i i))
                ($2 (num (i))
                    ((rec (pi (num (i))) $2) $3 (num (i)))
                    $3)
                $3)))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const g (pin x xs) ((pi (num (n1 ns))) xs))
   (const pin (pi sn) pin)
   (const sn (num (n0 n1 ns)) sn)
   (const x x x)
   (() n0 n0 n0)
   (() n1 n1 n1)
   (() f f f)
   (() n n n)))
--------
(let (($1 (num (i i i i))))
  (results
    (program
      (succ ((pi (num (i)))
             ((rec (pi (num (i))) (comp succ (pi (num (i i)))))
              $1
              (num (i i)))
             $1)))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($6 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        (comp-map
          succ
          (())
          (() $3)
          (num (i))
          ((pi (num (i))) $6)
          $6)
        $6))))


Step:
(((zero succ
        pi
        comp
        comp-map
        rec
        μ
        search-μ
        num
        i
        hello)
  o
  (comp-map f acc gf xs)
  (f args (g xs)))
 (() gf (bl1 g) gf)
 (() acc (bl2 args) acc)
 (() bl1 bl1 bl1)
 (() bl2 bl2 bl2)
 (() f f f)
 (() g g g)
 (() x1 x1 x1))
--------
(let (($1 (pi (num (i i)))) ($2 (num (i i i i))))
  (results
    (program
      (succ ($1 (num (i i))
                ((comp succ $1) (num (i)) ((pi (num (i))) $2) $2)
                $2)))))


Step:
(let ((pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (((zero succ
          pi
          comp
          comp-map
          rec
          μ
          search-μ
          num
          i
          hello)
    g
    (xs pa ys)
    (xs a ys))
   (() pa pa pa)
   (() p0 p0 p0)
   (() z z z)
   (() a a a)
   (() numz numz numz)
   (() nums nums nums)
   (() y y y)))
--------
(let (($3 (pi (num (i i)))) ($4 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        ((comp succ $3) (num (i)) $4 $4)
        $4))))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  ((const o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
   (const c (comp f g gs) c)
   (() f f f)
   (() g g g)))
--------
(let (($3 (pi (num (i i)))) ($6 (num (i i i i))))
  (results
    (program
      (comp-map
        succ
        (())
        (() $3)
        (num (i i))
        (comp-map
          succ
          (())
          (() $3)
          (num (i))
          ((pi (num (i))) $6)
          $6)
        $6))))


Step:
(((zero succ
        pi
        comp
        comp-map
        rec
        μ
        search-μ
        num
        i
        hello)
  o
  (comp-map f acc gf xs)
  (f args (g xs)))
 (() gf (bl1 g) gf)
 (() acc (bl2 args) acc)
 (() bl1 bl1 bl1)
 (() bl2 bl2 bl2)
 (() f f f)
 (() g g g)
 (() x1 x1 x1))
--------
(let (($1 (pi (num (i i)))) ($2 (num (i i i i))))
  (results
    (program
      ((comp succ $1)
       (num (i i))
       (succ ($1 (num (i)) ((pi (num (i))) $2) $2))
       $2))))


Step:
(let ((pa (p0 a args))
