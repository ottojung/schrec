Original:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? (cdr '(1))) (yes var1) no)))
      (var1 (cons (car (cdr '(1 2 3 4))) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? (cdr '(1))) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? '()) (yes var1) no)))
      (var1 (cons (car (cdr '(1 2 3 4))) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? (cdr '(1))) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? '()) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? (cdr '(1))) (yes var1) no)))
      (var1 (cons '2 '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? (cdr '(1))) (yes var1) no)))
      (var1 (cons '2 '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? '()) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? '()) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? '()) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? (cdr '(1))) (yes var1) no)))
      (var1 (cons '2 '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? (cdr '(1))) (yes var1) no)))
      (var1 (cons '2 '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? '()) (yes var1) no)))
      (var1 (cons '2 '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
                 (const z (qq x) z)
                 (const w (qq x) w))
                body))
    (eval g
          ((const g (car '(x xs)) 'x) (const x x x))
          body)
    (eval g
          ((const g (cdr '(x xs)) '(xs)) (const x x x))
          body)
    (eval g
          ((const g (cons 'x '(ys)) '(x ys)) (const x x x))
          body)
    (eval g
          ((const g
                  (begin sa instructions)
                  (begin instructions))
           (() sab sab '(y xs))
           (() sa sa sa)
           (() y y y)
           (() x x x))
          body)
    (eval g
          ((const g
                  (begin sd instructions)
                  (begin instructions))
           (() sdb sdb '(x ys))
           (() sd sd sd)
           (() x x x))
          body)
    (eval g
          ((const g (begin (begin xs)) (begin xs)))
          body)
    (eval g
          ((const g (begin 'x) 'x) (() x x x))
          body))))

Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? '()) (yes var1) no)))
      (var1 (cons '2 '(7 8)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  (((eva1 g
          ((const g (if (begin true) x y) (begin x)))
          body)
    (eva1 g
          ((const g (if (begin false) x y) (begin x)))
          body)
    (eva1 g
          ((const g (null? (qq x)) (begin true))
           (const x x x))
          (eval g
                ((const g (null? z) (begin false))
                 (const z (qq (x xs)))
                 (const x x x))
                body))
    (eva1 g
          ((const g (eq? (qq x) (qq y)) (begin false)))
          (eva1 g
                ((const g (eq? z w) (begin true))
