Original:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums))
      (body (results
              (program (add (num (i i i i)) (num (i i i))))))
      (add (rec (pi 0) (comp succ (pi 1))))
      (0 (num (i)))
      (1 (num (i i)))
      (result (num not0))
      (result.4 (num n.4))
      (n.4 (i))
      (main (μ f)))
  ((eval (g const
            ((g (xs pa ys) (xs a ys))
             (pa pa pa)
             (p0 p0 p0)
             (z z z)
             (a a a)
             (numz numz numz)
             (nums nums nums)
             (y y y)))
         body)
   (eval (g const
            ((g (pin x xs) ((pi (num (n1 ns))) xs))
             (pin (pi sn) pin)
             (sn (num (n0 n1 ns)) sn)
             (x x x)
             (n0 n0 n0)
             (n1 n1 n1)
             (f f f)
             (n n n)))
         body)
   (eval (g const ((g (zero xs) (num (i))))) body)
   (eval (o const
            ((o (succ n) (num (i ys)))
             (n (num y) n)
             (y (ys) y)))
         body)
   (eval (o const
            ((o (comp-map f acc gf xs) (f args (g xs)))
             (gf (bl1 g) gf)
             (acc (bl2 args) acc)
             (bl1 bl1 bl1)
             (bl2 bl2 bl2)
             (f f f)
             (g g g)
             (x1 x1 x1)))
         body)
   (eval (o const
            ((o (comp-map f acc gf xs)
                (comp-map f (args (g1 xs)) gf xs))
             (gf (bl2 g1 g2 gs) (bl2 g2 gs))
             (acc (args) acc)
             (bl2 bl2 bl2)
             (f f f)
             (g1 g1 g1)
             (g2 g2 g2)))
         body)
   (eval (o const
            ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
             (c (comp f g gs) c)
             (f f f)
             (g g g)))
         body)
   (eval (o const
            (o (search-μ f result x args)
               (search-μ f (f (succ x) args) (succ x) args))
            (f f f)
            (x x x)
            (not0 not0 not0)
            (result result result))
         (eval (o const
                  (o (search-μ-keyword f result.4 x args)
                     ((pi (num (i))) x))
                  (search-μ-keyword search-μ search-μ-keyword)
                  (n.4 n.4 n.4)
                  (f f f)
                  (x x x)
                  (result.4 result.4 result.4))
               body))
   (eval (o const
            (o (main args)
               (search-μ f (f (num (i))) (num (i)) args))
            (f f f)
            (main main main))
         body)
   (eval (o const
            ((o (rr args n0) (f args))
             (rr (rec f g) rr)
             (n0 (num numz.0) n0)
             (numz.0 (nums) numz.0)
             (nums nums nums)
             (f f f)
             (g g g)))
         body)
   (eval (o const
            ((o (rr args sm)
                (g (num (x2 xs)) (rr args (num (x2 xs))) args))
             (rr (rec f g) rr)
             (sm (num nl) sm)
             (nl (x1 x2 xs) nl)
             (x1 x1 x1)
             (x2 x2 x2)
             (f f f)
             (g g g)))
         body)))


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args sm)
         (g (num (x2 xs)) (rr args (num (x2 xs))) args))
      (rr (rec f g) rr)
      (sm (num nl) sm)
      (nl (x1 x2 xs) nl)
      (x1 x1 x1)
      (x2 x2 x2)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ($1 (num (i i)) (add $2 (num (i i))) $2))))
      ($1 (comp succ (pi 1)))
      (1 (num (i i)))
      (add (rec (pi 0) $1))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args sm)
         (g (num (x2 xs)) (rr args (num (x2 xs))) args))
      (rr (rec f g) rr)
      (sm (num nl) sm)
      (nl (x1 x2 xs) nl)
      (x1 x1 x1)
      (x2 x2 x2)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ($1 (num (i i))
                    ($1 (num (i)) (add $2 (num (i))) $2)
                    $2))))
      ($1 (comp succ (pi 1)))
      (1 (num (i i)))
      (add (rec (pi 0) $1))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  (add $2 (num (i i)))
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (add (rec (pi 0) (comp succ $1)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args n0) (f args))
      (rr (rec f g) rr)
      (n0 (num numz) n0)
      (numz (nums) numz)
      (nums nums nums)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ($1 (num (i i)) ($1 (num (i)) ((pi 0) $2) $2) $2))))
      ($1 (comp succ (pi 1)))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  ($2 (num (i)) (add $3 (num (i))) $3)
                  $3))))
      ($1 (pi 1))
      (1 (num (i i)))
      ($2 (comp succ $1))
      (add (rec (pi 0) $2))
      (0 (num (i)))
      ($3 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ($1 (num (i i))
                    (comp-map
                      succ
                      (())
                      (() $2)
                      (num (i))
                      (add $3 (num (i)))
                      $3)
                    $3))))
      ($1 (comp succ $2))
      ($2 (pi 1))
      (1 (num (i i)))
      (add (rec (pi 0) $1))
      (0 (num (i)))
      ($3 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args sm)
         (g (num (x2 xs)) (rr args (num (x2 xs))) args))
      (rr (rec f g) rr)
      (sm (num nl) sm)
      (nl (x1 x2 xs) nl)
      (x1 x1 x1)
      (x2 x2 x2)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  ($2 (num (i)) (add $3 (num (i))) $3)
                  $3))))
      ($1 (pi 1))
      (1 (num (i i)))
      ($2 (comp succ $1))
      (add (rec (pi 0) $2))
      (0 (num (i)))
      ($3 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (comp-map f acc gf xs) (f args (g xs)))
      (gf (bl1 g) gf)
      (acc (bl2 args) acc)
      (bl1 bl1 bl1)
      (bl2 bl2 bl2)
      (f f f)
      (g g g)
      (x1 x1 x1))))
--------
(let ((body (results
              (program
                (succ ($1 (num (i i)) (add $2 (num (i i))) $2)))))
      ($1 (pi 1))
      (1 (num (i i)))
      (add (rec (pi 0) (comp succ $1)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  ((comp succ $1) (num (i)) ((pi 0) $2) $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ((comp succ $1)
                 (num (i i))
                 (comp-map
                   succ
                   (())
                   (() $1)
                   (num (i))
                   ((pi 0) $2)
                   $2)
                 $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g const
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(let ((body (results
              (program
                ($1 (num (i i)) ($1 (num (i)) $2 $2) $2))))
      ($1 (comp succ (pi 1)))
      (1 (num (i i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args n0) (f args))
      (rr (rec f g) rr)
      (n0 (num numz) n0)
      (numz (nums) numz)
      (nums nums nums)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  ((comp succ $1) (num (i)) ((pi 0) $2) $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  (comp-map
                    succ
                    (())
                    (() $1)
                    (num (i))
                    (add $2 (num (i)))
                    $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (add (rec (pi 0) (comp succ $1)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (comp-map f acc gf xs) (f args (g xs)))
      (gf (bl1 g) gf)
      (acc (bl2 args) acc)
      (bl1 bl1 bl1)
      (bl2 bl2 bl2)
      (f f f)
      (g g g)
      (x1 x1 x1))))
--------
(let ((body (results
              (program
                (succ ($1 (num (i i))
                          ($2 (num (i)) (add $3 (num (i))) $3)
                          $3)))))
      ($1 (pi 1))
      (1 (num (i i)))
      ($2 (comp succ $1))
      (add (rec (pi 0) $2))
      (0 (num (i)))
      ($3 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args n0) (f args))
      (rr (rec f g) rr)
      (n0 (num numz) n0)
      (numz (nums) numz)
      (nums nums nums)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                ((comp succ $1)
                 (num (i i))
                 (comp-map
                   succ
                   (())
                   (() $1)
                   (num (i))
                   ((pi 0) $2)
                   $2)
                 $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  (comp-map
                    succ
                    (())
                    (() $1)
                    (num (i))
                    (add $2 (num (i)))
                    $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (add (rec (pi 0) (comp succ $1)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (comp-map f acc gf xs) (f args (g xs)))
      (gf (bl1 g) gf)
      (acc (bl2 args) acc)
      (bl1 bl1 bl1)
      (bl2 bl2 bl2)
      (f f f)
      (g g g)
      (x1 x1 x1))))
--------
(let ((body (results
              (program
                ($1 (num (i i))
                    (succ ($2 (num (i)) (add $3 (num (i))) $3))
                    $3))))
      ($1 (comp succ $2))
      ($2 (pi 1))
      (1 (num (i i)))
      (add (rec (pi 0) $1))
      (0 (num (i)))
      ($3 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args n0) (f args))
      (rr (rec f g) rr)
      (n0 (num numz) n0)
      (numz (nums) numz)
      (nums nums nums)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  ((comp succ $1) (num (i)) ((pi 0) $2) $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  (comp-map
                    succ
                    (())
                    (() $1)
                    (num (i))
                    (add $2 (num (i)))
                    $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (add (rec (pi 0) (comp succ $1)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (comp-map f acc gf xs) (f args (g xs)))
      (gf (bl1 g) gf)
      (acc (bl2 args) acc)
      (bl1 bl1 bl1)
      (bl2 bl2 bl2)
      (f f f)
      (g g g)
      (x1 x1 x1))))
--------
(let ((body (results
              (program
                (succ ($1 (num (i i))
                          ($2 (num (i)) (add $3 (num (i))) $3)
                          $3)))))
      ($1 (pi 1))
      (1 (num (i i)))
      ($2 (comp succ $1))
      (add (rec (pi 0) $2))
      (0 (num (i)))
      ($3 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (rr args sm)
         (g (num (x2 xs)) (rr args (num (x2 xs))) args))
      (rr (rec f g) rr)
      (sm (num nl) sm)
      (nl (x1 x2 xs) nl)
      (x1 x1 x1)
      (x2 x2 x2)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (succ ($1 (num (i i))
                          ($2 (num (i)) (add $3 (num (i))) $3)
                          $3)))))
      ($1 (pi 1))
      (1 (num (i i)))
      ($2 (comp succ $1))
      (add (rec (pi 0) $2))
      (0 (num (i)))
      ($3 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (g const
     ((g (pin x xs) ((pi (num (n1 ns))) xs))
      (pin (pi sn) pin)
      (sn (num (n0 n1 ns)) sn)
      (x x x)
      (n0 n0 n0)
      (n1 n1 n1)
      (f f f)
      (n n n))))
--------
(let ((body (results
              (program
                (succ ((pi (num (i))) (add $1 (num (i i))) $1)))))
      (add (rec (pi 0) (comp succ (pi 1))))
      (0 (num (i)))
      (1 (num (i i)))
      ($1 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (c xs) (comp-map f (bl1) (bl2 g gs) xs))
      (c (comp f g gs) c)
      (f f f)
      (g g g))))
--------
(let ((body (results
              (program
                (comp-map
                  succ
                  (())
                  (() $1)
                  (num (i i))
                  (comp-map
                    succ
                    (())
                    (() $1)
                    (num (i))
                    ((pi 0) $2)
                    $2)
                  $2))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello)))
  (o const
     ((o (comp-map f acc gf xs) (f args (g xs)))
      (gf (bl1 g) gf)
      (acc (bl2 args) acc)
      (bl1 bl1 bl1)
      (bl2 bl2 bl2)
      (f f f)
      (g g g)
      (x1 x1 x1))))
--------
(let ((body (results
              (program
                (succ ($1 (num (i i))
                          ((comp succ $1) (num (i)) ((pi 0) $2) $2)
                          $2)))))
      ($1 (pi 1))
      (1 (num (i i)))
      (0 (num (i)))
      ($2 (num (i i i i))))
  body)


Step:
(let ((const (zero succ
                   pi
                   comp
                   comp-map
                   rec
                   μ
                   search-μ
                   num
                   i
                   hello))
      (pa (p0 a args))
      (p0 (pi z))
      (z (num numz))
      (numz (nums)))
  (g const
     ((g (xs pa ys) (xs a ys))
      (pa pa pa)
      (p0 p0 p0)
      (z z z)
      (a a a)
      (numz numz numz)
      (nums nums nums)
      (y y y))))
--------
(let ((body (results
