Original:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin
              (set-car! var1 '9)
              (if (null? var2) (yes var1) no)))
      (var1 (cons (car (cdr '(1 2 3 4))) '(7 8)))
      (var2 (cdr '(1)))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  ((eva1 (g const ((g (if (begin true) x y) (begin x))))
         body)
   (eva1 (g const ((g (if (begin false) x y) (begin x))))
         body)
   (eva1 (g const ((g (null? 'x) (begin true)) (x x x)))
         (eval (g const
                  ((g (null? z) (begin false)) (z '(x xs)) (x x x)))
               body))
   (eva1 (g const ((g (eq? 'x 'y) (begin false))))
         (eva1 (g const
                  ((g (eq? z w) (begin true)) (z 'x z) (w 'x w)))
               body))
   (eval (g const ((g (car '(x xs)) 'x) (x x x)))
         body)
   (eval (g const ((g (cdr '(x xs)) '(xs)) (x x x)))
         body)
   (eval (g const ((g (cons 'x '(ys)) '(x ys)) (x x x)))
         body)
   (eval (g const
            ((g (begin sa instructions) (begin instructions))
             (sab sab '(y xs))
             (sa sa sa)
             (y y y)
             (x x x)))
         body)
   (eval (g const
            ((g (begin sd instructions) (begin instructions))
             (sdb sdb '(x ys))
             (sd sd sd)
             (x x x)))
         body)
   (eval (g const ((g (begin (begin xs)) (begin xs))))
         body)
   (eval (g const ((g (begin 'x) 'x) (x x x))) body)))


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if)))
  (g const ((g (cdr '(x xs)) '(xs)) (x x x))))
--------
(let ((body (begin
              (set-car! var1 '9)
              (if (null? var2) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (var2 (cdr '(1))))
  body)


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if)))
  (g const ((g (cdr '(x xs)) '(xs)) (x x x))))
--------
(let ((body (begin
              (set-car! var1 '9)
              (if (null? var2) (yes var1) no)))
      (var1 (cons (car '(2 3 4)) '(7 8)))
      (var2 '()))
  body)


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if)))
  (g const ((g (car '(x xs)) 'x) (x x x))))
--------
(let ((body (begin
              (set-car! var1 '9)
              (if (null? var2) (yes var1) no)))
      (var1 (cons '2 '(7 8)))
      (var2 '()))
  body)


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if)))
  (g const ((g (cons 'x '(ys)) '(x ys)) (x x x))))
--------
(let ((body (begin
              (set-car! var1 '9)
              (if (null? var2) (yes var1) no)))
      (var1 '(2 7 8))
      (var2 '()))
  body)


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (sa (set-car! sab 'y))
      (sab '(x xs)))
  (g const
     ((g (begin sa instructions) (begin instructions))
      (sab sab '(y xs))
      (sa sa sa)
      (y y y)
      (x x x))))
--------
(let ((body (begin (if (null? var2) (yes var1) no)))
      (var2 '())
      (var1 '(9 7 8)))
  body)


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if)))
  (g const ((g (null? 'x) (begin true)) (x x x))))
--------
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin (if (begin true) (yes var1) no)))
      (var1 '(9 7 8)))
  (eval (g const
           ((g (null? z) (begin false)) (z '(x xs)) (x x x)))
        body))


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if)))
  (g const ((g (if (begin true) x y) (begin x)))))
--------
(let ((body (begin (begin (yes var1))))
      (var1 '(9 7 8)))
  body)


Step:
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if)))
  (g const ((g (begin (begin xs)) (begin xs)))))
--------
(let ((body (begin (yes var1))) (var1 '(9 7 8)))
  body)
(let ((const (car cdr
                  cons
                  set-car!
                  set-cdr!
                  begin
                  quote
                  eq?
                  null?
                  true
                  false
                  if))
      (body (begin (yes var1)))
      (var1 '(9 7 8))
      (sa (set-car! sab 'y))
      (sab '(x xs))
      (sd (set-cdr! sdb '(ys)))
      (sdb '(x xs)))
  ((eva1 (g const ((g (if (begin true) x y) (begin x))))
         body)
   (eva1 (g const ((g (if (begin false) x y) (begin x))))
         body)
   (eva1 (g const ((g (null? 'x) (begin true)) (x x x)))
         (eval (g const
                  ((g (null? z) (begin false)) (z '(x xs)) (x x x)))
               body))
   (eva1 (g const ((g (eq? 'x 'y) (begin false))))
         (eva1 (g const
                  ((g (eq? z w) (begin true)) (z 'x z) (w 'x w)))
               body))
   (eval (g const ((g (car '(x xs)) 'x) (x x x)))
         body)
   (eval (g const ((g (cdr '(x xs)) '(xs)) (x x x)))
         body)
   (eval (g const ((g (cons 'x '(ys)) '(x ys)) (x x x)))
         body)
   (eval (g const
            ((g (begin sa instructions) (begin instructions))
             (sab sab '(y xs))
             (sa sa sa)
             (y y y)
             (x x x)))
         body)
   (eval (g const
            ((g (begin sd instructions) (begin instructions))
             (sdb sdb '(x ys))
             (sd sd sd)
             (x x x)))
         body)
   (eval (g const ((g (begin (begin xs)) (begin xs))))
         body)
   (eval (g const ((g (begin 'x) 'x) (x x x))) body)))
