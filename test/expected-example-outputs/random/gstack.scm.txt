Original:
(let ((const (null cons
                   car
                   cdr
                   set
                   push
                   pop
                   if
                   null?
                   eq?
                   and
                   do
                   stack))
      (do (start))
      (start (begin
               null
               null
               (push var1)
               (pop e0)
               null
               (if null?
                 (begin
                   (push var1)
                   (push ((5 6)))
                   car
                   cons
                   (pop e1)
                   cons
                   (push e1)
                   (push e1)
                   set
                   (pop e2)
                   (push e2)
                   (pop e9)
                   (result e0 e1 e2))
                 (should-not-happen do stack))))
      (var1 (2)))
  (((eval (g const
             ((do (command) (rest))
              (command (and null rest) command)
              (stack (ss) (() ss))))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and cons rest) command)
              (stack (s1 s2 ss) ((s1 ys) ss))
              (s1 s1 s1)
              (s2 (ys) s2)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and car rest) command)
              (stack (s1 ss) (x ss))
              (s1 (x xs) s1)
              (x x x)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and cdr rest) command)
              (stack (s1 ss) ((xs) ss))
              (s1 (x xs) s1)
              (x x x)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and set rest) command)
              (stack (s1 s2 ss) (s2 ss))
              (s1 (xs) s1)
              (s2 (ys) (xs))))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and push-expr rest) command)
              (push-expr (push v) push-expr)
              (v (x) v)
              (stack (ss) (x ss))
              (x x x)))
          body)
    (eval (g const
             ((do (command) (rest))
              (command (and pop-expr rest) command)
              (pop-expr (pop v) pop-expr)
              (v (cs) (s1))
              (stack (s1 ss) (ss))
              (s1 s1 s1)))
          body)
    (eval (g const
             ((do (command) (then))
              (command (if null? then else) command)
              (stack (s1 ss) (ss))
              (then then then)
              (else else else)
              (s1 s1 s1)))
          (eval (g const
                   ((do (command) (else))
                    (command (if null? then else) command)
                    (stack (s1 ss) (ss))
                    (s1 (x xs) s1)
                    (then then then)
                    (else else else)
                    (x x x)))
                body))
    (eval (g const
             ((do (command) (else))
              (command (if eq? then else) command)
              (stack (s1 s2 ss) (ss))
              (then then then)
              (else else else)
              (s1 s1 s1)
              (s2 s2 s2)))
          (eval (g const
                   ((do (command) (then))
                    (command (if eq? then else) command)
                    (stack (s1 s1 ss) (ss))
                    (s1 s1 s1)
                    (then then then)
                    (else else else)))
                body))
    (eval (g (and begin)
             ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
              (x1 x1 x1)
              (x2 x2 x2)
              (x3 x3 x3)))
          start)
    (eva1 (g (and begin) ((g (begin x1 x2) (and x1 x2))))
          start))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null
                  (begin
                    null
                    (push var1)
                    (pop e0)
                    null
                    (if null?
                      (begin
                        (push var1)
                        (push ((5 6)))
                        car
                        cons
                        (pop e1)
                        cons
                        (push e1)
                        (push e1)
                        set
                        (pop e2)
                        (push e2)
                        (pop e9)
                        (result e0 e1 e2))
                      (should-not-happen (start) stack)))))
      (var1 (2)))
  start)


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((start (and null
                  (and null
                       (begin
                         (push var1)
                         (pop e0)
                         null
                         (if null?
                           (begin
                             (push var1)
                             (push ((5 6)))
                             car
                             cons
                             (pop e1)
                             cons
                             (push e1)
                             (push e1)
                             set
                             (pop e2)
                             (push e2)
                             (pop e9)
                             (result e0 e1 e2))
                           (should-not-happen (start) stack))))))
      (var1 (2)))
  start)


Step:
(let ((do ((and null
                (begin
                  (push var1)
                  (pop e0)
                  null
                  (if null?
                    (begin
                      (push var1)
                      (push ((5 6)))
                      car
                      cons
                      (pop e1)
                      cons
                      (push e1)
                      (push e1)
                      set
                      (pop e2)
                      (push e2)
                      (pop e9)
                      (result e0 e1 e2))
                    (should-not-happen do stack))))))
      (var1 (2))
      (stack (())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let (($1 (and null
               (and (push var1)
                    (begin
                      (pop e0)
                      null
                      (if null?
                        (begin
                          (push var1)
                          (push ((5 6)))
                          car
                          cons
                          (pop e1)
                          cons
                          (push e1)
                          (push e1)
                          set
                          (pop e2)
                          (push e2)
                          (pop e9)
                          (result e0 e1 e2))
                        (should-not-happen ($1) (())))))))
      (var1 (2)))
  (and null $1))


Step:
(let ((do ((and (push var1)
                (begin
                  (pop e0)
                  null
                  (if null?
                    (begin
                      (push var1)
                      (push ((5 6)))
                      car
                      cons
                      (pop e1)
                      cons
                      (push e1)
                      (push e1)
                      set
                      (pop e2)
                      (push e2)
                      (pop e9)
                      (result e0 e1 e2))
                    (should-not-happen do stack))))))
      (var1 (2))
      (stack (() ())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let (($1 (and (push var1)
               (and (pop e0)
                    (begin
                      null
                      (if null?
                        (begin
                          (push var1)
                          (push ((5 6)))
                          car
                          cons
                          (pop e1)
                          cons
                          (push e1)
                          (push e1)
                          set
                          (pop e2)
                          (push e2)
                          (pop e9)
                          (result e0 e1 e2))
                        (should-not-happen ($1) (() ())))))))
      (var1 (2)))
  (and null (and null $1)))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let (($1 (and (push var1)
               (and (pop e0)
                    (begin
                      null
                      (if null?
                        (and (push var1)
                             (begin
                               (push ((5 6)))
                               car
                               cons
                               (pop e1)
                               cons
                               (push e1)
                               (push e1)
                               set
                               (pop e2)
                               (push e2)
                               (pop e9)
                               (result e0 e1 e2)))
                        (should-not-happen ($1) (() ())))))))
      (var1 (2)))
  (and null (and null $1)))


Step:
(let ((do ((and (pop e0)
                (begin
                  null
                  (if null?
                    (and (push (2))
                         (begin
                           (push ((5 6)))
                           car
                           cons
                           (pop e1)
                           cons
                           (push e1)
                           (push e1)
                           set
                           (pop e2)
                           (push e2)
                           (pop e9)
                           (result e0 e1 e2)))
                    (should-not-happen do stack))))))
      (stack (2 () ())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and push-expr rest) command)
      (push-expr (push v) push-expr)
      (v (x) v)
      (stack (ss) (x ss))
      (x x x))))
--------
body


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      ($1 (and (pop e0)
               (begin
                 null
                 (if null?
                   (and (push var1)
                        (and (push ((5 6)))
                             (begin
                               car
                               cons
                               (pop e1)
                               cons
                               (push e1)
                               (push e1)
                               set
                               (pop e2)
                               (push e2)
                               (pop e9)
                               (result e0 e1 e2))))
                   (should-not-happen ($1) (2 () ())))))))
  (and null (and null (and (push var1) $1))))


Step:
(let ((do ((begin
             null
             (if null?
               (and (push (2))
                    (and (push ((5 6)))
                         (begin
                           car
                           cons
                           (pop e1)
                           cons
                           (push e1)
                           (push e1)
                           set
                           (pop e2)
                           (push e2)
                           (pop e9)
                           (result (2) e1 e2))))
               (should-not-happen do stack)))))
      (stack (() ())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and pop-expr rest) command)
      (pop-expr (pop v) pop-expr)
      (v (cs) (s1))
      (stack (s1 ss) (ss))
      (s1 s1 s1))))
--------
body


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (begin
            null
            (if null?
              (and (push var1)
                   (and (push ((5 6)))
                        (and car
                             (begin
                               cons
                               (pop e1)
                               cons
                               (push e1)
                               (push e1)
                               set
                               (pop e2)
                               (push e2)
                               (pop e9)
                               (result e0 e1 e2)))))
              (should-not-happen ($1) (() ()))))))
  (and null
       (and null (and (push var1) (and (pop e0) $1)))))


Step:
(g (and begin) ((g (begin x1 x2) (and x1 x2))))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (and null
               (if null?
                 (and (push var1)
                      (and (push ((5 6)))
                           (and car
                                (begin
                                  cons
                                  (pop e1)
                                  cons
                                  (push e1)
                                  (push e1)
                                  set
                                  (pop e2)
                                  (push e2)
                                  (pop e9)
                                  (result e0 e1 e2)))))
                 (should-not-happen ($1) (() ()))))))
  (and null
       (and null (and (push var1) (and (pop e0) $1)))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (and null
               (if null?
                 (and (push var1)
                      (and (push ((5 6)))
                           (and car
                                (and cons
                                     (begin
                                       (pop e1)
                                       cons
                                       (push e1)
                                       (push e1)
                                       set
                                       (pop e2)
                                       (push e2)
                                       (pop e9)
                                       (result e0 e1 e2))))))
                 (should-not-happen ($1) (() ()))))))
  (and null
       (and null (and (push var1) (and (pop e0) $1)))))


Step:
(let ((do ((if null?
             (and (push (2))
                  (and (push ((5 6)))
                       (and car
                            (and cons
                                 (begin
                                   (pop e1)
                                   cons
                                   (push e1)
                                   (push e1)
                                   set
                                   (pop e2)
                                   (push e2)
                                   (pop e9)
                                   (result (2) e1 e2))))))
             (should-not-happen do stack))))
      (stack (() () ())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and null rest) command)
      (stack (ss) (() ss)))))
--------
body


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (begin
                                       cons
                                       (push e1)
                                       (push e1)
                                       set
                                       (pop e2)
                                       (push e2)
                                       (pop e9)
                                       (result e0 e1 e2)))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (and cons
                                          (begin
                                            (push e1)
                                            (push e1)
                                            set
                                            (pop e2)
                                            (push e2)
                                            (pop e9)
                                            (result e0 e1 e2))))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (and cons
                                          (and (push e1)
                                               (begin
                                                 (push e1)
                                                 set
                                                 (pop e2)
                                                 (push e2)
                                                 (pop e9)
                                                 (result e0 e1 e2)))))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (and cons
                                          (and (push e1)
                                               (and (push e1)
                                                    (begin
                                                      set
                                                      (pop e2)
                                                      (push e2)
                                                      (pop e9)
                                                      (result
                                                        e0
                                                        e1
                                                        e2))))))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (and cons
                                          (and (push e1)
                                               (and (push e1)
                                                    (and set
                                                         (begin
                                                           (pop e2)
                                                           (push e2)
                                                           (pop e9)
                                                           (result
                                                             e0
                                                             e1
                                                             e2)))))))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (and cons
                                          (and (push e1)
                                               (and (push e1)
                                                    (and set
                                                         (and (pop e2)
                                                              (begin
                                                                (push e2)
                                                                (pop e9)
                                                                (result
                                                                  e0
                                                                  e1
                                                                  e2))))))))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(g (and begin)
   ((g (begin x1 x2 x3 xs) (and x1 (begin x2 x3 xs)))
    (x1 x1 x1)
    (x2 x2 x2)
    (x3 x3 x3)))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (and cons
                                          (and (push e1)
                                               (and (push e1)
                                                    (and set
                                                         (and (pop e2)
                                                              (and (push e2)
                                                                   (begin
                                                                     (pop e9)
                                                                     (result
                                                                       e0
                                                                       e1
                                                                       e2)))))))))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(g (and begin) ((g (begin x1 x2) (and x1 x2))))
--------
(let ((var1 (2))
      (e0 (2))
      ($1 (if null?
            (and (push var1)
                 (and (push ((5 6)))
                      (and car
                           (and cons
                                (and (pop e1)
                                     (and cons
                                          (and (push e1)
                                               (and (push e1)
                                                    (and set
                                                         (and (pop e2)
                                                              (and (push e2)
                                                                   (and (pop e9)
                                                                        (result
                                                                          e0
                                                                          e1
                                                                          e2)))))))))))))
            (should-not-happen ($1) (() () ())))))
  (and null
       (and null
            (and (push var1) (and (pop e0) (and null $1))))))


Step:
(let ((do ((and (push (2))
                (and (push ((5 6)))
                     (and car
                          (and cons
                               (and (pop e1)
                                    (and cons
                                         (and (push e1)
                                              (and (push e1)
                                                   (and set
                                                        (and (pop e2)
                                                             (and (push e2)
                                                                  (and (pop e9)
                                                                       (result
                                                                         (2)
                                                                         e1
                                                                         e2)))))))))))))))
      (stack (() ())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (then))
      (command (if null? then else) command)
      (stack (s1 ss) (ss))
      (then then then)
      (else else else)
      (s1 s1 s1))))
--------
(let ((do ((and (push (2))
                (and (push ((5 6)))
                     (and car
                          (and cons
                               (and (pop e1)
                                    (and cons
                                         (and (push e1)
                                              (and (push e1)
                                                   (and set
                                                        (and (pop e2)
                                                             (and (push e2)
                                                                  (and (pop e9)
                                                                       (result
                                                                         (2)
                                                                         e1
                                                                         e2)))))))))))))))
      (stack (() ())))
  (eval (g (null cons
                 car
                 cdr
                 set
                 push
                 pop
                 if
                 null?
                 eq?
                 and
                 do
                 stack)
           ((do (command) (else))
            (command (if null? then else) command)
            (stack (s1 ss) (ss))
            (s1 (x xs) s1)
            (then then then)
            (else else else)
            (x x x)))
        body))


Step:
(let ((do ((and (push ((5 6)))
                (and car
                     (and cons
                          (and (pop e1)
                               (and cons
                                    (and (push e1)
                                         (and (push e1)
                                              (and set
                                                   (and (pop e2)
                                                        (and (push e2)
                                                             (and (pop e9)
                                                                  (result
                                                                    (2)
                                                                    e1
                                                                    e2))))))))))))))
      (stack (2 () ())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
           null?
           eq?
           and
           do
           stack)
     ((do (command) (rest))
      (command (and push-expr rest) command)
      (push-expr (push v) push-expr)
      (v (x) v)
      (stack (ss) (x ss))
      (x x x))))
--------
body


Step:
(let ((do ((and car
                (and cons
                     (and (pop e1)
                          (and cons
                               (and (push e1)
                                    (and (push e1)
                                         (and set
                                              (and (pop e2)
                                                   (and (push e2)
                                                        (and (pop e9)
                                                             (result
                                                               (2)
                                                               e1
                                                               e2)))))))))))))
      (stack ((5 6) 2 () ())))
  (g (null cons
           car
           cdr
           set
           push
           pop
           if
